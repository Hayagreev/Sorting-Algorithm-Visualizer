{"ast":null,"code":"//bubble sort\nexport var bubbleSortAnimations=function bubbleSortAnimations(arr){var animations=[];for(var i=0;i<arr.length-1;i++){for(var j=0;j<arr.length-i-1;j++){if(arr[j]>arr[j+1]){swap(arr,j,j+1);animations.push([j,j+1,true]);//animations is array of arrays (in form [[val1, val2, swapped]])\n}else{animations.push([j,j+1,false]);}}}return animations;};//quick sort\nexport var quickSortAnimations=function quickSortAnimations(arr){var animations=[];quickSortAnimationsP(arr,0,arr.length-1,animations);return animations;};function quickSortAnimationsP(arr,lowIndex,highIndex,animations){if(lowIndex>=highIndex){return;}var pivotIndex=getPivot(lowIndex,highIndex);var pivot=arr[pivotIndex];animations.push([pivotIndex,2]);//[] in form of [index, color]. Note: 2 means green, 1 is secondary color, 0 is primary color\nswap(arr,pivotIndex,highIndex);animations.push([pivotIndex,highIndex,true]);//[] in form of [index1, index2, shouldSwap]\nanimations.push([highIndex,2]);var leftPointer=partition(arr,lowIndex,highIndex,pivot,animations);animations.push([highIndex,0]);quickSortAnimationsP(arr,lowIndex,leftPointer-1,animations);quickSortAnimationsP(arr,leftPointer+1,highIndex,animations);}function partition(arr,lowIndex,highIndex,pivot,animations){var leftPointer=lowIndex;var rightPointer=highIndex;animations.push([leftPointer,1]);animations.push([rightPointer,1]);while(leftPointer<rightPointer){while(arr[leftPointer]<=pivot&&leftPointer<rightPointer){animations.push([leftPointer,0]);leftPointer++;animations.push([leftPointer,1]);}while(arr[rightPointer]>=pivot&&leftPointer<rightPointer){animations.push([rightPointer,0]);rightPointer--;animations.push([rightPointer,1]);}swap(arr,leftPointer,rightPointer);animations.push([leftPointer,rightPointer,true]);}if(arr[leftPointer]>arr[highIndex]){swap(arr,leftPointer,highIndex);animations.push([leftPointer,highIndex,true]);}else{leftPointer=highIndex;}animations.push([leftPointer,0]);animations.push([rightPointer,0]);return leftPointer;}// function quickSortAnimationsP(arr, low, high, animations) {\n//   if (low < high) {\n//     // pi is partitioning index, arr[p]\n//     // is now at right place\n//     let pi = partition(arr, low, high, animations);\n//     // Separately sort elements before\n//     // partition and after partition\n//     quickSortAnimationsP(arr, low, pi - 1, animations);\n//     quickSortAnimationsP(arr, pi + 1, high, animations);\n//   }\n// }\n// function partition(arr, low, high, animations) {\n//   // pivot\n//   let pivot = arr[high];\n//   // Index of smaller element and\n//   // indicates the right position\n//   // of pivot found so far\n//   let leftPointer = low;\n//   for (let j = low; j <= high - 1; j++) {\n//     // If current element is smaller\n//     // than the pivot\n//     if (arr[j] < pivot) {\n//       // Increment index of\n//       // smaller element\n//       swap(arr, leftPointer, j);\n//       animations.push([leftPointer, j, true]);\n//       leftPointer++;\n//     }\n//   }\n//   swap(arr, leftPointer, high);\n//   animations.push([leftPointer, high, true]);\n//   return leftPointer;\n// }\nfunction getPivot(lowIndex,highIndex){return Math.floor(Math.random()*(highIndex-lowIndex)+1)+lowIndex;}//merge sort\nexport var mergeSortAnimations=function mergeSortAnimations(arr){var animations=[];mergeSortAnimationsP(arr,0,arr.length-1,animations);console.log(animations);return animations;};function mergeSortAnimationsP(arr,startInd,endInd,animations){var arrLen=arr.length;if(arrLen<2){return;}var midIndex=Math.floor(arrLen/2);var leftHalf=[[],startInd,startInd+midIndex-1];var rightHalf=[[],startInd+midIndex,endInd];for(var i=0;i<midIndex;i++){leftHalf[0].push(arr[i]);}for(var i=midIndex;i<arrLen;i++){rightHalf[0].push(arr[i]);}mergeSortAnimationsP(leftHalf[0],leftHalf[1],leftHalf[2],animations);mergeSortAnimationsP(rightHalf[0],rightHalf[1],rightHalf[2],animations);merge(arr,leftHalf,rightHalf,animations);}function merge(arr,leftHalf,rightHalf,animations){//note: leftHalf is [[array to be sorted], startInd, endInd]; same for rightHalf\nvar leftLen=leftHalf[0].length;var rightLen=rightHalf[0].length;var leftIt=0,rightIt=0,arrIt=0;var leftPointer=leftIt+leftHalf[1];var rightPointer=rightIt+rightHalf[1];animations.push([leftIt+leftHalf[1],rightIt+rightHalf[1],2]);// form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\nanimations.push([leftIt+leftHalf[1],rightIt+rightHalf[1],0]);while(leftIt<leftLen&&rightIt<rightLen){if(leftHalf[0][leftIt]<=rightHalf[0][rightIt]){arr[arrIt]=leftHalf[0][leftIt];var arrToPush=[leftHalf[1]+leftIt+rightIt,arr[arrIt]];// need to do leftHalf[1] + leftIt + rightIt because we want actual index in arr (leftIt and rightIt mark the number of numbers already inserted into arr)\nanimations.push(arrToPush);leftIt++;leftPointer=leftIt+leftHalf[1];if(leftPointer>leftLen-1){leftPointer--;}animations.push([leftPointer,rightPointer,2]);// form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\nanimations.push([leftPointer,rightPointer,0]);}else{arr[arrIt]=rightHalf[0][rightIt];var arrToPush=[leftHalf[1]+leftIt+rightIt,arr[arrIt]];animations.push(arrToPush);rightIt++;rightPointer=rightIt+rightHalf[1];if(rightPointer>rightLen-1){rightPointer--;}animations.push([leftPointer,rightPointer,2]);// form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\nanimations.push([leftPointer,rightPointer,0]);}arrIt++;}while(leftIt<leftLen){arr[arrIt]=leftHalf[0][leftIt];var arrToPush=[leftHalf[1]+leftIt+rightIt,arr[arrIt]];animations.push(arrToPush);//format: [index in overall array, height of box (number)]\narrIt++;leftIt++;leftPointer=leftIt+leftHalf[1];if(leftPointer>leftLen-1){leftPointer--;}animations.push([leftPointer,rightPointer,2]);// form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\nanimations.push([leftPointer,rightPointer,0]);}while(rightIt<rightLen){arr[arrIt]=rightHalf[0][rightIt];var arrToPush=[leftHalf[1]+leftIt+rightIt,arr[arrIt]];animations.push(arrToPush);arrIt++;rightIt++;rightPointer=rightIt+rightHalf[1];if(rightPointer>rightLen-1){rightPointer--;}animations.push([leftPointer,rightPointer,2]);// form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\nanimations.push([leftPointer,rightPointer,0]);}}//Heap sort\nexport var heapSortAnimations=function heapSortAnimations(arr){var animations=[];heapSortAnimationsP(arr,arr.length,animations);return animations;};function heapSortAnimationsP(arr,arrLen,animations){if(arrLen<2){return;}for(var i=Math.floor(arrLen/2)-1;i>=0;i--){heapify(arr,arrLen,i,animations);}for(var _i=arr.length-1;_i>0;_i--){swap(arr,0,_i);animations.push([0,_i,true]);arrLen--;heapify(arr,arrLen,0,animations);}}function heapify(arr,arrLen,parentIndex,animations){//i is parent index\nvar largestParentIndex=parentIndex;var leftChild=2*parentIndex+1;var rightChild=2*parentIndex+2;if(leftChild<arrLen&&arr[leftChild]>arr[largestParentIndex]){largestParentIndex=leftChild;}if(rightChild<arrLen&&arr[rightChild]>arr[largestParentIndex]){largestParentIndex=rightChild;}if(largestParentIndex!=parentIndex){swap(arr,parentIndex,largestParentIndex);animations.push([parentIndex,largestParentIndex,true]);heapify(arr,arrLen,largestParentIndex,animations);}}// function heapSortAnimationsP(arr, animations) {\n//   if (arr.length < 2) {\n//     return arr;\n//   }\n//   let arrLen = arr.length;\n//   for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n//     sortParentAndChild(arr, arrLen, i, animations);\n//   }\n//   for (let i = arr.length - 1; i > 0; i--) {\n//     swap(arr, 0, i);\n//     animations.push(0, i, true);\n//     arrLen--;\n//     sortParentAndChild(arr, arrLen, 0, animations);\n//   }\n//   return arr;\n// }\n// function sortParentAndChild(arr, arrLen, parentIndex, animations) {\n//   const leftIndex = parentIndex * 2 + 1;\n//   const rightIndex = parentIndex * 2 + 2;\n//   let maxIndex = parentIndex;\n//   if (leftIndex < arrLen && arr[leftIndex] > arr[maxIndex]) {\n//     maxIndex = leftIndex;\n//   }\n//   if (rightIndex < arrLen && arr[rightIndex] > arr[maxIndex]) {\n//     maxIndex = rightIndex;\n//   }\n//   if (maxIndex !== parentIndex) {\n//     swap(arr, parentIndex, maxIndex);\n//     animations.push([parentIndex, maxIndex, true]);\n//     sortParentAndChild(arr, arrLen, maxIndex, animations);\n//   }\n// }\nfunction swap(arr,ind1,ind2){var temp=arr[ind1];arr[ind1]=arr[ind2];arr[ind2]=temp;}","map":{"version":3,"names":["bubbleSortAnimations","arr","animations","i","length","j","swap","push","quickSortAnimations","quickSortAnimationsP","lowIndex","highIndex","pivotIndex","getPivot","pivot","leftPointer","partition","rightPointer","Math","floor","random","mergeSortAnimations","mergeSortAnimationsP","console","log","startInd","endInd","arrLen","midIndex","leftHalf","rightHalf","merge","leftLen","rightLen","leftIt","rightIt","arrIt","arrToPush","heapSortAnimations","heapSortAnimationsP","heapify","parentIndex","largestParentIndex","leftChild","rightChild","ind1","ind2","temp"],"sources":["/Users/hayagreevdilip/Sorting-Algorithm-Visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"sourcesContent":["//bubble sort\nexport const bubbleSortAnimations = (arr) => {\n  var animations = [];\n  for (var i = 0; i < arr.length - 1; i++) {\n    for (var j = 0; j < arr.length - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        swap(arr, j, j + 1);\n        animations.push([j, j + 1, true]); //animations is array of arrays (in form [[val1, val2, swapped]])\n      } else {\n        animations.push([j, j + 1, false]);\n      }\n    }\n  }\n\n  return animations;\n};\n\n//quick sort\nexport const quickSortAnimations = (arr) => {\n  var animations = [];\n  quickSortAnimationsP(arr, 0, arr.length - 1, animations);\n  return animations;\n};\n\nfunction quickSortAnimationsP(arr, lowIndex, highIndex, animations) {\n  if (lowIndex >= highIndex) {\n    return;\n  }\n\n  var pivotIndex = getPivot(lowIndex, highIndex);\n  var pivot = arr[pivotIndex];\n  animations.push([pivotIndex, 2]); //[] in form of [index, color]. Note: 2 means green, 1 is secondary color, 0 is primary color\n\n  swap(arr, pivotIndex, highIndex);\n  animations.push([pivotIndex, highIndex, true]); //[] in form of [index1, index2, shouldSwap]\n\n  animations.push([highIndex, 2]);\n\n  var leftPointer = partition(arr, lowIndex, highIndex, pivot, animations);\n\n  animations.push([highIndex, 0]);\n\n  quickSortAnimationsP(arr, lowIndex, leftPointer - 1, animations);\n  quickSortAnimationsP(arr, leftPointer + 1, highIndex, animations);\n}\n\nfunction partition(arr, lowIndex, highIndex, pivot, animations) {\n  var leftPointer = lowIndex;\n  var rightPointer = highIndex;\n\n  animations.push([leftPointer, 1]);\n\n  animations.push([rightPointer, 1]);\n\n  while (leftPointer < rightPointer) {\n    while (arr[leftPointer] <= pivot && leftPointer < rightPointer) {\n      animations.push([leftPointer, 0]);\n      leftPointer++;\n      animations.push([leftPointer, 1]);\n    }\n\n    while (arr[rightPointer] >= pivot && leftPointer < rightPointer) {\n      animations.push([rightPointer, 0]);\n      rightPointer--;\n      animations.push([rightPointer, 1]);\n    }\n\n    swap(arr, leftPointer, rightPointer);\n    animations.push([leftPointer, rightPointer, true]);\n  }\n\n  if (arr[leftPointer] > arr[highIndex]) {\n    swap(arr, leftPointer, highIndex);\n    animations.push([leftPointer, highIndex, true]);\n  } else {\n    leftPointer = highIndex;\n  }\n\n  animations.push([leftPointer, 0]);\n  animations.push([rightPointer, 0]);\n\n  return leftPointer;\n}\n\n// function quickSortAnimationsP(arr, low, high, animations) {\n//   if (low < high) {\n//     // pi is partitioning index, arr[p]\n//     // is now at right place\n//     let pi = partition(arr, low, high, animations);\n\n//     // Separately sort elements before\n//     // partition and after partition\n//     quickSortAnimationsP(arr, low, pi - 1, animations);\n//     quickSortAnimationsP(arr, pi + 1, high, animations);\n//   }\n// }\n\n// function partition(arr, low, high, animations) {\n//   // pivot\n//   let pivot = arr[high];\n\n//   // Index of smaller element and\n//   // indicates the right position\n//   // of pivot found so far\n//   let leftPointer = low;\n\n//   for (let j = low; j <= high - 1; j++) {\n//     // If current element is smaller\n//     // than the pivot\n//     if (arr[j] < pivot) {\n//       // Increment index of\n//       // smaller element\n\n//       swap(arr, leftPointer, j);\n//       animations.push([leftPointer, j, true]);\n//       leftPointer++;\n//     }\n//   }\n//   swap(arr, leftPointer, high);\n//   animations.push([leftPointer, high, true]);\n//   return leftPointer;\n// }\n\nfunction getPivot(lowIndex, highIndex) {\n  return Math.floor(Math.random() * (highIndex - lowIndex) + 1) + lowIndex;\n}\n\n//merge sort\n\nexport const mergeSortAnimations = (arr) => {\n  var animations = [];\n  mergeSortAnimationsP(arr, 0, arr.length - 1, animations);\n  console.log(animations);\n  return animations;\n};\n\nfunction mergeSortAnimationsP(arr, startInd, endInd, animations) {\n  var arrLen = arr.length;\n\n  if (arrLen < 2) {\n    return;\n  }\n\n  var midIndex = Math.floor(arrLen / 2);\n  var leftHalf = [[], startInd, startInd + midIndex - 1];\n  var rightHalf = [[], startInd + midIndex, endInd];\n\n  for (var i = 0; i < midIndex; i++) {\n    leftHalf[0].push(arr[i]);\n  }\n\n  for (var i = midIndex; i < arrLen; i++) {\n    rightHalf[0].push(arr[i]);\n  }\n\n  mergeSortAnimationsP(leftHalf[0], leftHalf[1], leftHalf[2], animations);\n  mergeSortAnimationsP(rightHalf[0], rightHalf[1], rightHalf[2], animations);\n\n  merge(arr, leftHalf, rightHalf, animations);\n}\n\nfunction merge(arr, leftHalf, rightHalf, animations) {\n  //note: leftHalf is [[array to be sorted], startInd, endInd]; same for rightHalf\n  var leftLen = leftHalf[0].length;\n  var rightLen = rightHalf[0].length;\n\n  var leftIt = 0,\n    rightIt = 0,\n    arrIt = 0;\n\n  var leftPointer = leftIt + leftHalf[1];\n  var rightPointer = rightIt + rightHalf[1];\n\n  animations.push([leftIt + leftHalf[1], rightIt + rightHalf[1], 2]); // form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\n  animations.push([leftIt + leftHalf[1], rightIt + rightHalf[1], 0]);\n\n  while (leftIt < leftLen && rightIt < rightLen) {\n    if (leftHalf[0][leftIt] <= rightHalf[0][rightIt]) {\n      arr[arrIt] = leftHalf[0][leftIt];\n      var arrToPush = [leftHalf[1] + leftIt + rightIt, arr[arrIt]]; // need to do leftHalf[1] + leftIt + rightIt because we want actual index in arr (leftIt and rightIt mark the number of numbers already inserted into arr)\n      animations.push(arrToPush);\n\n      leftIt++;\n\n      leftPointer = leftIt + leftHalf[1];\n      if (leftPointer > leftLen - 1) {\n        leftPointer--;\n      }\n\n      animations.push([leftPointer, rightPointer, 2]); // form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\n      animations.push([leftPointer, rightPointer, 0]);\n    } else {\n      arr[arrIt] = rightHalf[0][rightIt];\n      var arrToPush = [leftHalf[1] + leftIt + rightIt, arr[arrIt]];\n      animations.push(arrToPush);\n\n      rightIt++;\n\n      rightPointer = rightIt + rightHalf[1];\n      if (rightPointer > rightLen - 1) {\n        rightPointer--;\n      }\n\n      animations.push([leftPointer, rightPointer, 2]); // form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\n      animations.push([leftPointer, rightPointer, 0]);\n    }\n\n    arrIt++;\n  }\n\n  while (leftIt < leftLen) {\n    arr[arrIt] = leftHalf[0][leftIt];\n    var arrToPush = [leftHalf[1] + leftIt + rightIt, arr[arrIt]];\n    animations.push(arrToPush); //format: [index in overall array, height of box (number)]\n\n    arrIt++;\n    leftIt++;\n\n    leftPointer = leftIt + leftHalf[1];\n    if (leftPointer > leftLen - 1) {\n      leftPointer--;\n    }\n\n    animations.push([leftPointer, rightPointer, 2]); // form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\n    animations.push([leftPointer, rightPointer, 0]);\n  }\n\n  while (rightIt < rightLen) {\n    arr[arrIt] = rightHalf[0][rightIt];\n    var arrToPush = [leftHalf[1] + leftIt + rightIt, arr[arrIt]];\n    animations.push(arrToPush);\n\n    arrIt++;\n    rightIt++;\n\n    rightPointer = rightIt + rightHalf[1];\n    if (rightPointer > rightLen - 1) {\n      rightPointer--;\n    }\n\n    animations.push([leftPointer, rightPointer, 2]); // form of [left pointer index, rightpointer index, color] --> 2 is pointer color, 1 is secondary color, 0 is primary color\n    animations.push([leftPointer, rightPointer, 0]);\n  }\n}\n\n//Heap sort\nexport const heapSortAnimations = (arr) => {\n  var animations = [];\n  heapSortAnimationsP(arr, arr.length, animations);\n  return animations;\n};\n\nfunction heapSortAnimationsP(arr, arrLen, animations) {\n  if (arrLen < 2) {\n    return;\n  }\n\n  for (var i = Math.floor(arrLen / 2) - 1; i >= 0; i--) {\n    heapify(arr, arrLen, i, animations);\n  }\n\n  for (let i = arr.length - 1; i > 0; i--) {\n    swap(arr, 0, i);\n    animations.push([0, i, true]);\n    arrLen--;\n    heapify(arr, arrLen, 0, animations);\n  }\n}\n\nfunction heapify(arr, arrLen, parentIndex, animations) {\n  //i is parent index\n  var largestParentIndex = parentIndex;\n  const leftChild = 2 * parentIndex + 1;\n  const rightChild = 2 * parentIndex + 2;\n\n  if (leftChild < arrLen && arr[leftChild] > arr[largestParentIndex]) {\n    largestParentIndex = leftChild;\n  }\n\n  if (rightChild < arrLen && arr[rightChild] > arr[largestParentIndex]) {\n    largestParentIndex = rightChild;\n  }\n\n  if (largestParentIndex != parentIndex) {\n    swap(arr, parentIndex, largestParentIndex);\n    animations.push([parentIndex, largestParentIndex, true]);\n\n    heapify(arr, arrLen, largestParentIndex, animations);\n  }\n}\n\n// function heapSortAnimationsP(arr, animations) {\n//   if (arr.length < 2) {\n//     return arr;\n//   }\n\n//   let arrLen = arr.length;\n//   for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--) {\n//     sortParentAndChild(arr, arrLen, i, animations);\n//   }\n\n//   for (let i = arr.length - 1; i > 0; i--) {\n//     swap(arr, 0, i);\n//     animations.push(0, i, true);\n//     arrLen--;\n//     sortParentAndChild(arr, arrLen, 0, animations);\n//   }\n\n//   return arr;\n// }\n\n// function sortParentAndChild(arr, arrLen, parentIndex, animations) {\n//   const leftIndex = parentIndex * 2 + 1;\n//   const rightIndex = parentIndex * 2 + 2;\n\n//   let maxIndex = parentIndex;\n//   if (leftIndex < arrLen && arr[leftIndex] > arr[maxIndex]) {\n//     maxIndex = leftIndex;\n//   }\n\n//   if (rightIndex < arrLen && arr[rightIndex] > arr[maxIndex]) {\n//     maxIndex = rightIndex;\n//   }\n\n//   if (maxIndex !== parentIndex) {\n//     swap(arr, parentIndex, maxIndex);\n//     animations.push([parentIndex, maxIndex, true]);\n//     sortParentAndChild(arr, arrLen, maxIndex, animations);\n//   }\n// }\n\nfunction swap(arr, ind1, ind2) {\n  var temp = arr[ind1];\n  arr[ind1] = arr[ind2];\n  arr[ind2] = temp;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}